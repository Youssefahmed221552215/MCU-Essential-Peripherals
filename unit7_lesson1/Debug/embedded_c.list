
embedded_c.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000022c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800035c  08000364  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800035c  0800035c  00010364  2**0
                  CONTENTS
  4 .ARM          00000000  0800035c  0800035c  00010364  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800035c  08000364  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800035c  0800035c  0001035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000360  08000360  00010360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010364  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000364  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000364  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010364  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a28  00000000  00000000  0001038d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001b6  00000000  00000000  00010db5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000110  00000000  00000000  00010f6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000060  00000000  00000000  00011080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000048  00000000  00000000  000110e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001c67  00000000  00000000  00011128  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000648  00000000  00000000  00012d8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000801d  00000000  00000000  000133d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001b3f4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c0  00000000  00000000  0001b470  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000344 	.word	0x08000344

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000344 	.word	0x08000344

08000170 <delay>:
#define GPIO_Port_B  0x40010C00
#define GPIOB_CRL (*(volatile uint32_t *) (GPIO_Port_B+0x00))
#define GPIOB_CRH (*(volatile uint32_t *) (GPIO_Port_B+0x04))
#define GPIOB_IDR (*(volatile uint32_t *) (GPIO_Port_B+0x08))
#define GPIOB_ODR (*(volatile uint32_t *) (GPIO_Port_B+0x0C))
void delay(unsigned int a){
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	unsigned int i ,j ;
	for(i=0; i<a; i++){
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e00b      	b.n	8000196 <delay+0x26>
		for(j=0; j<256; j++);
 800017e:	2300      	movs	r3, #0
 8000180:	60bb      	str	r3, [r7, #8]
 8000182:	e002      	b.n	800018a <delay+0x1a>
 8000184:	68bb      	ldr	r3, [r7, #8]
 8000186:	3301      	adds	r3, #1
 8000188:	60bb      	str	r3, [r7, #8]
 800018a:	68bb      	ldr	r3, [r7, #8]
 800018c:	2bff      	cmp	r3, #255	; 0xff
 800018e:	d9f9      	bls.n	8000184 <delay+0x14>
	for(i=0; i<a; i++){
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	3301      	adds	r3, #1
 8000194:	60fb      	str	r3, [r7, #12]
 8000196:	68fa      	ldr	r2, [r7, #12]
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	429a      	cmp	r2, r3
 800019c:	d3ef      	bcc.n	800017e <delay+0xe>
	}
}
 800019e:	bf00      	nop
 80001a0:	3714      	adds	r7, #20
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bc80      	pop	{r7}
 80001a6:	4770      	bx	lr

080001a8 <CLOCK_INIT>:

void CLOCK_INIT()
{
 80001a8:	b480      	push	{r7}
 80001aa:	af00      	add	r7, sp, #0
	RCC_ABP2ENR |=(1<<2);//enable clock for GPIO PORTA
 80001ac:	4b07      	ldr	r3, [pc, #28]	; (80001cc <CLOCK_INIT+0x24>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	4a06      	ldr	r2, [pc, #24]	; (80001cc <CLOCK_INIT+0x24>)
 80001b2:	f043 0304 	orr.w	r3, r3, #4
 80001b6:	6013      	str	r3, [r2, #0]
	RCC_ABP2ENR |=(1<<3);//enble clock for GPIO PORTB
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <CLOCK_INIT+0x24>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	4a03      	ldr	r2, [pc, #12]	; (80001cc <CLOCK_INIT+0x24>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6013      	str	r3, [r2, #0]
}
 80001c4:	bf00      	nop
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bc80      	pop	{r7}
 80001ca:	4770      	bx	lr
 80001cc:	40021018 	.word	0x40021018

080001d0 <GPIO_INIT>:
void GPIO_INIT()
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0


	//set portA pin 13 as input floating
	GPIOA_CRH &=~(0b1111<<20);
 80001d4:	4b19      	ldr	r3, [pc, #100]	; (800023c <GPIO_INIT+0x6c>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a18      	ldr	r2, [pc, #96]	; (800023c <GPIO_INIT+0x6c>)
 80001da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80001de:	6013      	str	r3, [r2, #0]
	GPIOA_CRH |=(0b0100<<20);
 80001e0:	4b16      	ldr	r3, [pc, #88]	; (800023c <GPIO_INIT+0x6c>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a15      	ldr	r2, [pc, #84]	; (800023c <GPIO_INIT+0x6c>)
 80001e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001ea:	6013      	str	r3, [r2, #0]
	//set portA pin 1 as input floating
	GPIOA_CRL &=~(0b1111<<4);
 80001ec:	4b14      	ldr	r3, [pc, #80]	; (8000240 <GPIO_INIT+0x70>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a13      	ldr	r2, [pc, #76]	; (8000240 <GPIO_INIT+0x70>)
 80001f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80001f6:	6013      	str	r3, [r2, #0]
	GPIOA_CRL |=(0b0100<<4);
 80001f8:	4b11      	ldr	r3, [pc, #68]	; (8000240 <GPIO_INIT+0x70>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a10      	ldr	r2, [pc, #64]	; (8000240 <GPIO_INIT+0x70>)
 80001fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000202:	6013      	str	r3, [r2, #0]
	//set portB pin 1 as output mode (push-pull),max speed 2MHZ
	GPIOB_CRL &=~(0b1111<<4);
 8000204:	4b0f      	ldr	r3, [pc, #60]	; (8000244 <GPIO_INIT+0x74>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a0e      	ldr	r2, [pc, #56]	; (8000244 <GPIO_INIT+0x74>)
 800020a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800020e:	6013      	str	r3, [r2, #0]
	GPIOB_CRL |=(0b0010<<4);
 8000210:	4b0c      	ldr	r3, [pc, #48]	; (8000244 <GPIO_INIT+0x74>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a0b      	ldr	r2, [pc, #44]	; (8000244 <GPIO_INIT+0x74>)
 8000216:	f043 0320 	orr.w	r3, r3, #32
 800021a:	6013      	str	r3, [r2, #0]
	// set portB pin 13 as output mode(push-pull),max speed 2MHZ
	GPIOB_CRH &=~(0b1111<<20);
 800021c:	4b0a      	ldr	r3, [pc, #40]	; (8000248 <GPIO_INIT+0x78>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a09      	ldr	r2, [pc, #36]	; (8000248 <GPIO_INIT+0x78>)
 8000222:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000226:	6013      	str	r3, [r2, #0]
	GPIOB_CRH |=(0b0010<<20);
 8000228:	4b07      	ldr	r3, [pc, #28]	; (8000248 <GPIO_INIT+0x78>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a06      	ldr	r2, [pc, #24]	; (8000248 <GPIO_INIT+0x78>)
 800022e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000232:	6013      	str	r3, [r2, #0]
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	40010804 	.word	0x40010804
 8000240:	40010800 	.word	0x40010800
 8000244:	40010c00 	.word	0x40010c00
 8000248:	40010c04 	.word	0x40010c04

0800024c <main>:


int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
	CLOCK_INIT();
 8000250:	f7ff ffaa 	bl	80001a8 <CLOCK_INIT>
	GPIO_INIT();
 8000254:	f7ff ffbc 	bl	80001d0 <GPIO_INIT>
	while(1)
	{
		if(((GPIOA_IDR&(1<<1))>>1)==0)
 8000258:	4b11      	ldr	r3, [pc, #68]	; (80002a0 <main+0x54>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f003 0302 	and.w	r3, r3, #2
 8000260:	2b00      	cmp	r3, #0
 8000262:	d10c      	bne.n	800027e <main+0x32>
		{
			GPIOB_ODR^=(1<<1);//single pressing
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <main+0x58>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a0e      	ldr	r2, [pc, #56]	; (80002a4 <main+0x58>)
 800026a:	f083 0302 	eor.w	r3, r3, #2
 800026e:	6013      	str	r3, [r2, #0]
			while(((GPIOA_IDR&(1<<1))>>1)==0);
 8000270:	bf00      	nop
 8000272:	4b0b      	ldr	r3, [pc, #44]	; (80002a0 <main+0x54>)
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	f003 0302 	and.w	r3, r3, #2
 800027a:	2b00      	cmp	r3, #0
 800027c:	d0f9      	beq.n	8000272 <main+0x26>
		}
		if(((GPIOA_IDR&(1<<13))>>13)==1)
 800027e:	4b08      	ldr	r3, [pc, #32]	; (80002a0 <main+0x54>)
 8000280:	681b      	ldr	r3, [r3, #0]
 8000282:	0b5b      	lsrs	r3, r3, #13
 8000284:	f003 0301 	and.w	r3, r3, #1
 8000288:	2b01      	cmp	r3, #1
 800028a:	d105      	bne.n	8000298 <main+0x4c>
		{
			GPIOB_ODR^=(1<<13);//multi pressing
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <main+0x58>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <main+0x58>)
 8000292:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8000296:	6013      	str	r3, [r2, #0]

		}
		delay(1);
 8000298:	2001      	movs	r0, #1
 800029a:	f7ff ff69 	bl	8000170 <delay>
		if(((GPIOA_IDR&(1<<1))>>1)==0)
 800029e:	e7db      	b.n	8000258 <main+0xc>
 80002a0:	40010808 	.word	0x40010808
 80002a4:	40010c0c 	.word	0x40010c0c

080002a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002a8:	480d      	ldr	r0, [pc, #52]	; (80002e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002aa:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b0:	480c      	ldr	r0, [pc, #48]	; (80002e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b2:	490d      	ldr	r1, [pc, #52]	; (80002e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b4:	4a0d      	ldr	r2, [pc, #52]	; (80002ec <LoopForever+0xe>)
  movs r3, #0
 80002b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002b8:	e002      	b.n	80002c0 <LoopCopyDataInit>

080002ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002be:	3304      	adds	r3, #4

080002c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c4:	d3f9      	bcc.n	80002ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002c6:	4a0a      	ldr	r2, [pc, #40]	; (80002f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002c8:	4c0a      	ldr	r4, [pc, #40]	; (80002f4 <LoopForever+0x16>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002cc:	e001      	b.n	80002d2 <LoopFillZerobss>

080002ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d0:	3204      	adds	r2, #4

080002d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d4:	d3fb      	bcc.n	80002ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002d6:	f000 f811 	bl	80002fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002da:	f7ff ffb7 	bl	800024c <main>

080002de <LoopForever>:

LoopForever:
    b LoopForever
 80002de:	e7fe      	b.n	80002de <LoopForever>
  ldr   r0, =_estack
 80002e0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002ec:	08000364 	.word	0x08000364
  ldr r2, =_sbss
 80002f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f4:	2000001c 	.word	0x2000001c

080002f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002f8:	e7fe      	b.n	80002f8 <ADC1_2_IRQHandler>
	...

080002fc <__libc_init_array>:
 80002fc:	b570      	push	{r4, r5, r6, lr}
 80002fe:	2500      	movs	r5, #0
 8000300:	4e0c      	ldr	r6, [pc, #48]	; (8000334 <__libc_init_array+0x38>)
 8000302:	4c0d      	ldr	r4, [pc, #52]	; (8000338 <__libc_init_array+0x3c>)
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	10a4      	asrs	r4, r4, #2
 8000308:	42a5      	cmp	r5, r4
 800030a:	d109      	bne.n	8000320 <__libc_init_array+0x24>
 800030c:	f000 f81a 	bl	8000344 <_init>
 8000310:	2500      	movs	r5, #0
 8000312:	4e0a      	ldr	r6, [pc, #40]	; (800033c <__libc_init_array+0x40>)
 8000314:	4c0a      	ldr	r4, [pc, #40]	; (8000340 <__libc_init_array+0x44>)
 8000316:	1ba4      	subs	r4, r4, r6
 8000318:	10a4      	asrs	r4, r4, #2
 800031a:	42a5      	cmp	r5, r4
 800031c:	d105      	bne.n	800032a <__libc_init_array+0x2e>
 800031e:	bd70      	pop	{r4, r5, r6, pc}
 8000320:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000324:	4798      	blx	r3
 8000326:	3501      	adds	r5, #1
 8000328:	e7ee      	b.n	8000308 <__libc_init_array+0xc>
 800032a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800032e:	4798      	blx	r3
 8000330:	3501      	adds	r5, #1
 8000332:	e7f2      	b.n	800031a <__libc_init_array+0x1e>
 8000334:	0800035c 	.word	0x0800035c
 8000338:	0800035c 	.word	0x0800035c
 800033c:	0800035c 	.word	0x0800035c
 8000340:	08000360 	.word	0x08000360

08000344 <_init>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr

08000350 <_fini>:
 8000350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000352:	bf00      	nop
 8000354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000356:	bc08      	pop	{r3}
 8000358:	469e      	mov	lr, r3
 800035a:	4770      	bx	lr
