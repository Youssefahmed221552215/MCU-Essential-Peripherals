
lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000003fc  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000069e  00000000  00000000  0000060c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  64:	0c 94 db 00 	jmp	0x1b6	; 0x1b6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PORTD_CONFIG>:
#include <avr/delay.h>
#define F_CPU 8000000UL
#include "MemoryMap.h"
#include "Utils.h"
void PORTD_CONFIG()
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	resetbit(DDRD,0);//BORTD pin0 as input
  74:	a1 e3       	ldi	r26, 0x31	; 49
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e1 e3       	ldi	r30, 0x31	; 49
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	8e 7f       	andi	r24, 0xFE	; 254
  80:	8c 93       	st	X, r24
	resetbit(DDRD,1);//BORTD pin1 as input
  82:	a1 e3       	ldi	r26, 0x31	; 49
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e1 e3       	ldi	r30, 0x31	; 49
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8d 7f       	andi	r24, 0xFD	; 253
  8e:	8c 93       	st	X, r24
	resetbit(DDRD,2);//BORTD pin2 as input
  90:	a1 e3       	ldi	r26, 0x31	; 49
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e1 e3       	ldi	r30, 0x31	; 49
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	8c 93       	st	X, r24
	setbit(DDRD,4);//PORTD pin 4 as output
  9e:	a1 e3       	ldi	r26, 0x31	; 49
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e1 e3       	ldi	r30, 0x31	; 49
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	8c 93       	st	X, r24
	setbit(DDRD,5);//PORTD pin 5 as output
  ac:	a1 e3       	ldi	r26, 0x31	; 49
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e1 e3       	ldi	r30, 0x31	; 49
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	8c 93       	st	X, r24
	setbit(DDRD,6);//PORTD pin 6 as output
  ba:	a1 e3       	ldi	r26, 0x31	; 49
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e1 e3       	ldi	r30, 0x31	; 49
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	80 64       	ori	r24, 0x40	; 64
  c6:	8c 93       	st	X, r24
	setbit(DDRD,7);//PORTD pin 7 as output
  c8:	a1 e3       	ldi	r26, 0x31	; 49
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e1 e3       	ldi	r30, 0x31	; 49
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	8c 93       	st	X, r24
}
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <main>:
void main(void)
{
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	00 d0       	rcall	.+0      	; 0xe2 <main+0x6>
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
	volatile int count=5;
  e6:	85 e0       	ldi	r24, 0x05	; 5
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	9a 83       	std	Y+2, r25	; 0x02
  ec:	89 83       	std	Y+1, r24	; 0x01
	//volatile int reset=4;
	PORTD_CONFIG();
  ee:	0e 94 36 00 	call	0x6c	; 0x6c <PORTD_CONFIG>
  f2:	2a c0       	rjmp	.+84     	; 0x148 <main+0x6c>
	while(1)
	{
		//task2
		while(count<8)
		{
			if(readbit(PIND,1)==1)
  f4:	e0 e3       	ldi	r30, 0x30	; 48
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	86 95       	lsr	r24
  fc:	88 2f       	mov	r24, r24
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	81 70       	andi	r24, 0x01	; 1
 102:	90 70       	andi	r25, 0x00	; 0
 104:	88 23       	and	r24, r24
 106:	01 f1       	breq	.+64     	; 0x148 <main+0x6c>
			{
				setbit(PORTD,count++);
 108:	a2 e3       	ldi	r26, 0x32	; 50
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	e2 e3       	ldi	r30, 0x32	; 50
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	80 81       	ld	r24, Z
 112:	48 2f       	mov	r20, r24
 114:	29 81       	ldd	r18, Y+1	; 0x01
 116:	3a 81       	ldd	r19, Y+2	; 0x02
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 2e       	mov	r0, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <main+0x48>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <main+0x44>
 128:	84 2b       	or	r24, r20
 12a:	8c 93       	st	X, r24
 12c:	c9 01       	movw	r24, r18
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	9a 83       	std	Y+2, r25	; 0x02
 132:	89 83       	std	Y+1, r24	; 0x01
				while(readbit(PIND,1)==1);
 134:	e0 e3       	ldi	r30, 0x30	; 48
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	86 95       	lsr	r24
 13c:	88 2f       	mov	r24, r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	81 70       	andi	r24, 0x01	; 1
 142:	90 70       	andi	r25, 0x00	; 0
 144:	88 23       	and	r24, r24
 146:	b1 f7       	brne	.-20     	; 0x134 <main+0x58>
	//volatile int reset=4;
	PORTD_CONFIG();
	while(1)
	{
		//task2
		while(count<8)
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	9a 81       	ldd	r25, Y+2	; 0x02
 14c:	88 30       	cpi	r24, 0x08	; 8
 14e:	91 05       	cpc	r25, r1
 150:	8c f2       	brlt	.-94     	; 0xf4 <main+0x18>
 152:	2b c0       	rjmp	.+86     	; 0x1aa <main+0xce>

			}
		}
		while(count>4)
		{
			if(readbit(PIND,1)==1)
 154:	e0 e3       	ldi	r30, 0x30	; 48
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	86 95       	lsr	r24
 15c:	88 2f       	mov	r24, r24
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	81 70       	andi	r24, 0x01	; 1
 162:	90 70       	andi	r25, 0x00	; 0
 164:	88 23       	and	r24, r24
 166:	09 f1       	breq	.+66     	; 0x1aa <main+0xce>
			{
				resetbit(PORTD,count--);
 168:	a2 e3       	ldi	r26, 0x32	; 50
 16a:	b0 e0       	ldi	r27, 0x00	; 0
 16c:	e2 e3       	ldi	r30, 0x32	; 50
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	48 2f       	mov	r20, r24
 174:	29 81       	ldd	r18, Y+1	; 0x01
 176:	3a 81       	ldd	r19, Y+2	; 0x02
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <main+0xa8>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <main+0xa4>
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	c9 01       	movw	r24, r18
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	9a 83       	std	Y+2, r25	; 0x02
 194:	89 83       	std	Y+1, r24	; 0x01
				while(readbit(PIND,1)==1);
 196:	e0 e3       	ldi	r30, 0x30	; 48
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	86 95       	lsr	r24
 19e:	88 2f       	mov	r24, r24
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	90 70       	andi	r25, 0x00	; 0
 1a6:	88 23       	and	r24, r24
 1a8:	b1 f7       	brne	.-20     	; 0x196 <main+0xba>
				setbit(PORTD,count++);
				while(readbit(PIND,1)==1);

			}
		}
		while(count>4)
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	9a 81       	ldd	r25, Y+2	; 0x02
 1ae:	85 30       	cpi	r24, 0x05	; 5
 1b0:	91 05       	cpc	r25, r1
 1b2:	84 f6       	brge	.-96     	; 0x154 <main+0x78>
 1b4:	c9 cf       	rjmp	.-110    	; 0x148 <main+0x6c>

000001b6 <_exit>:
 1b6:	f8 94       	cli

000001b8 <__stop_program>:
 1b8:	ff cf       	rjmp	.-2      	; 0x1b8 <__stop_program>
